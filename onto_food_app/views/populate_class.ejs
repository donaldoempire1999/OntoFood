<%- include('./header')%>


<style>
.suggestions {
display: block;
width: 100%;
padding: 0.375rem 0.75rem;
font-size: 1rem;
font-weight: 400;
line-height: 1.5;
color: #212529;
background-color: #fff;
background-clip: padding-box;
border: 1px solid #ced4da;
-moz-appearance: none;
appearance: none;
border-radius: 0.25rem;
transition: border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
}


.suggestions ul {
padding: 0;
margin: 0;
list-style-type: none;
}

.suggestions ul:hover
{
background: lightgray;
color: white;
}

.suggestions a
{
text-decoration: none;
color: navy;
color: black;
}


.suggestions .selected a
{
color: white;
}

#autosuggest
{
display: none;
}

</style>


<!-- Page content-->
<div class="container mt-5">
    <div class="row">
        <div class="col-lg-12">
            <!-- Post content-->
            <article class="row">
                <!-- Post header-->
                <header class="mb-4">
                    <!-- Post title-->
                    <h1 class="fw-bolder mb-0" style="margin-bottom: 45px"> Populate</h1>
                </header>



            </article>

        </div>
    </div>

    <button type="button" class="btn btn-sm btn-success" onclick="addRow()"> add row</button>
    <button type="button" class="btn btn-sm btn-danger" onclick="getAllDataRowTable()"> populate </button>




    <section class="mb-10 col-lg-12" style="margin-top: 20px;">

        <div class="row">

            <div class="col-3" style="margin-top: 15px;">
                 <input type="text" placeholder=" Enter Suffixe URI" class="form-control form-control-sm" id="input_suffixe">
            </div>

        <table class="table " id="table_relation" style="margin-top: 15px;">
            <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Subject</th>
                <th scope="col">Predicate</th>
                <th scope="col">Object</th>
            </tr>
            </thead>
            <tbody>


            </tbody>
        </table>

        </div>

    </section>


</div>



<script>

    let entities = [];
    let data = [];
    let table_relation = document.getElementById("table_relation");
    let tbody = table_relation.getElementsByTagName("tbody")[0];
    let input_suffix = document.getElementById("input_suffixe");

    function getData(){

        let url = "http://localhost:3000/entity/get/all/properties";
        let xml_request = new XMLHttpRequest();
        xml_request.open("GET",url,true);
        xml_request.send();
        xml_request.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {

                 data = JSON.parse(this.responseText);
                 entities = data.entities;
             }
        }
    }


    function insertTriples(triples){

        triples = encodeURI(triples);

        let url = "http://localhost:3000/entity/insert_triples/?triples="+triples;
        let xml_request = new XMLHttpRequest();
        xml_request.open("GET",url,true);
        xml_request.send();
        xml_request.onreadystatechange = function () {
            if (this.readyState === 4 && this.status === 200) {

                console.log( JSON.parse(this.responseText))

            }
        }

    }



    function addRow(){
         let num;
         if(tbody.rows.length === 0){
             num = 0
         }else {
             num = tbody.lastElementChild.firstElementChild.textContent;
         }

        let tr = tbody.insertRow(-1);

        for (let i = 0; i < 4; i++){

            if (i === 0){
                let th = document.createElement("th");
                th.scope = "row"
                th.textContent = (parseInt(num) + 1).toString()
                tr.appendChild(th);
            }else {

                let td = document.createElement("td")
                let input = document.createElement("input");

                if (i === 1){
                    input.value = "onto:" + input_suffix.value;
                    input.type = "text";
                    input.disabled = true;
                }

                input.className = "form-control"
                td.appendChild(input);

                if (i > 1 ) {

                    let suggestion_div = document.createElement("div");
                    suggestion_div.className = "suggestions";
                    suggestion_div.hidden = true;
                    td.append(suggestion_div);
                    let _this = input;
                    input.addEventListener('keyup', function (e){

                        handleSuggestions(suggestion_div, _this);

                    });

                }
                tr.append(td);

            }

        }

    }


    // Ici on par recuperer toute les donnÃ©es.
    getData();


    function handleSuggestions(suggestions_div, input){

        let suggests = "";

        if(input.value !== "") {

            let entities_filter = entities.filter(item => item.includes(input.value));

            if(entities_filter.length > 0){

                suggestions_div.hidden = false;

                suggests = "<ul>";

                entities_filter.forEach(item => {

                    suggests += "<li><a>".concat(item).concat("</a></li>");
                });

                suggests += "</ul>"

                suggestions_div.innerHTML = suggests;

                suggestions_div.childNodes.item(0).childNodes.forEach(function(li){

                    li.childNodes.item(0).addEventListener('click', function() {

                        input.value = li.childNodes.item(0).textContent;

                        suggestions_div.hidden = true;

                    })


                });

            }
        }else {

            suggestions_div.innerHTML = suggests;
            suggestions_div.hidden = true;

        }


    };



    function getAllDataRowTable(){

        let triples = [];

        let n = tbody.rows.length;

        for (let i = 0 ; i <n ; i++ ){

            let tr = tbody.children.item(i);

            let triple = {
                s: "",
                p: "",
                o: ""
            };

            for (let k = 1; k < 4 ; k++){

                if(k === 1){

                    triple.s =  tr.childNodes.item(k).firstChild.value.toString();

                }

                if(k === 2){

                    triple.p =  tr.childNodes.item(k).firstChild.value.toString();

                }

                if(k === 3){

                    triple.o =  tr.childNodes.item(k).firstChild.value.toString();

                }
            }

            triples.push(triple);

        }

        let triples_concat = "";

        triples.forEach(triple => {

            triples_concat += triple.s + " " + triple.p + " " + triple.o + "." + "\n";

        })

        insertTriples(triples_concat);

    }








</script>
